buildscript {
    repositories {
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath libs.assetPipeline
    }
}

plugins {
    alias(libs.plugins.axionRelease)
    id 'java'
}

apply plugin: 'com.bertramlabs.asset-pipeline'

repositories {
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

configurations.all {
    resolutionStrategy {
        // Force secure versions to override vulnerable transitive dependencies
        force libs.commonsIo.get()
        force libs.commonsText.get()
        force libs.commonsLang3.get()
        force libs.junitOverride.get()
    }
}

sourceCompatibility = 11
targetCompatibility = 11

println "Java Home: ${System.getProperty('java.home')}"
println "Java Version: ${System.getProperty('java.version')}"
println "Gradle Version: ${gradle.gradleVersion}"

import org.apache.tools.ant.filters.ReplaceTokens

ext.pluginName = 'Job ROI Summary View'
ext.pluginDescription = 'Table list view of Jobs with ROI data'
ext.sopsCopyright = "Â© 2025, Eric Chapman | PagerDuty"
ext.sopsUrl = "http://docs.rundeck.com"
ext.buildDateString = new Date().format("yyyy-MM-dd'T'HH:mm:ssX")
ext.archivesBaseName = "ui-roisummary"
ext.pluginBaseFolder = "."

scmVersion {
    ignoreUncommittedChanges = true
    tag {
        prefix = ''
        versionSeparator = ''
    }
    versionCreator('simple')
}

project.version = scmVersion.version
ext.archiveFilename = ext.archivesBaseName + '-' + version

assets {
    verbose = true
    minifyJs = false
    minifyCss = false
    enableSourceMaps = false
    enableGzip = false

    includes = ['css/**/*.css', 'js/**/*.js']
    excludes = [
            '**/*.less',
            '**/*.html',
            '**/*.scss',
            'js/lib/*.js',
            'js/lib/**/*.js'
    ]

    from "${project.projectDir}/src/main/rdplugin/assets"
    compileDir = "${project.buildDir}/assets/resources"
}

task createMissingDirectories {
    doFirst {
        mkdir("${project.projectDir}/src/assets")
    }
}

assetCompile.dependsOn createMissingDirectories

defaultTasks 'build'

task pluginZip(type: Jar) {
    destinationDir = file("build/distributions")
    baseName = project.ext.archivesBaseName
    version = project.version
    extension = 'zip'

    from("${project.buildDir}/zip-contents") {
        into(archiveFilename)
        exclude "resources/manifest.properties"
    }

    manifest {
        attributes 'Rundeck-Plugin-Name': pluginName.toString(),
                'Rundeck-Plugin-Description': pluginDescription.toString(),
                'Rundeck-Plugin-Archive': 'true',
                'Rundeck-Plugin-File-Version': project.version,
                'Rundeck-Plugin-Author': sopsCopyright,
                'Rundeck-Plugin-URL': sopsUrl,
                'Rundeck-Plugin-Date': buildDateString
    }
}

build.dependsOn 'pluginZip'

pluginZip.doFirst {
    def assetsDir = "${project.buildDir}/assets/resources"
    def assetsMap = new Properties()
    def assetsManifest = file("${assetsDir}/manifest.properties")
    assetsManifest.withInputStream(assetsMap.&load)
    def tokens = assetsMap + [
            version: project.version,
            date: new Date().toString(),
            author: sopsCopyright,
            url: sopsUrl,
            title: pluginName,
            description: pluginDescription,
            name: archivesBaseName.toString(),
    ]
    copy {
        from(assetsDir) {
            into 'resources'
        }
        from("${project.projectDir}/src/main/rdplugin") {
            filter(ReplaceTokens, tokens: tokens)
            exclude "assets"
        }
        into "${project.buildDir}/zip-contents"
    }
}

project.pluginZip.dependsOn assetCompile
project.pluginZip.mustRunAfter assetCompile

dependencies {
    implementation(libs.sassAssetPipeline) {
        // Exclude problematic dependencies that cannot be safely upgraded
        exclude group: 'org.sharegov', module: 'mjson'
        exclude group: 'org.mozilla', module: 'rhino'
    }
}

artifacts {
    archives pluginZip
}